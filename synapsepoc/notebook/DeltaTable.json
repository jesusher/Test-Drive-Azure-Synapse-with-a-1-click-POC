{
	"name": "DeltaTable",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark31",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "12e97f41-5eb6-4ba6-96d1-2cf7939badeb"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8af3f092-169b-4f76-8cb3-822bfc9a88db/resourceGroups/rg-1-click-poc/providers/Microsoft.Synapse/workspaces/jhs2gt2acq3getmwpocws1/bigDataPools/spark31",
				"name": "spark31",
				"type": "Spark",
				"endpoint": "https://jhs2gt2acq3getmwpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark31",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Define column headers\r\n",
					"columns = [\"Employee\",\"Salary\"]\r\n",
					"\r\n",
					"# Define data for original dataframe\r\n",
					"empOriginal = [(\"Employee_1\",50000),(\"Employee_2\",55000)]\r\n",
					"\r\n",
					"# Define data for updates dataframe\r\n",
					"empUpdates = [(\"Employee_1\",50000),(\"Employee_2\",60000),(\"Employee_3\",55000)]\r\n",
					"\r\n",
					"# Create dataframe with orignial employee data\r\n",
					"dfOriginal = spark.createDataFrame(data = empOriginal,schema = columns)\r\n",
					"\r\n",
					"# Create dataframe with updated employee data\r\n",
					"dfUpdates = spark.createDataFrame(data = empUpdates,schema = columns)\r\n",
					"\r\n",
					"# Display dfOriginal\r\n",
					"dfOriginal.show()\r\n",
					"\r\n",
					"# Display dfUpdates\r\n",
					"dfUpdates.show()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create temp views of both the dfOriginal and dfUpdates dataframes \r\n",
					"# so that we can easily query them with Spark SQL later\r\n",
					"\r\n",
					"#dfOriginal\r\n",
					"dfOriginal.createOrReplaceTempView('Employee_Original')\r\n",
					"\r\n",
					"#dfUpdates\r\n",
					"dfUpdates.createOrReplaceTempView('Employee_Updates')"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Create Delta Lake table, define schema and location\r\n",
					"CREATE TABLE DELTA_Employees (\r\n",
					"  Employee STRING NOT NULL,\r\n",
					"  Salary INT NOT NULL,\r\n",
					"  BeginDate DATE NOT NULL,\r\n",
					"  EndDate DATE NOT NULL,\r\n",
					"  CurrentRecord INT NOT NULL \r\n",
					")\r\n",
					"USING DELTA\r\n",
					"-- specify data lake folder location\r\n",
					"LOCATION '/DELTA_Employees/Employees/' "
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- Merge statement to handle upsert of dfOrginal dataset into DELTA_Employees table\r\n",
					"MERGE INTO delta_employees t\r\n",
					"USING (\r\n",
					"    SELECT emp.Employee AS MergeKey, emp.*\r\n",
					"    FROM Employee_Original AS emp\r\n",
					"\r\n",
					"    UNION ALL\r\n",
					"\r\n",
					"    SELECT NULL AS MergeKey, emp.*\r\n",
					"    FROM Employee_Original AS emp\r\n",
					"    JOIN delta_employees AS de ON emp.Employee = de.Employee\r\n",
					"    WHERE de.CurrentRecord = 1 AND emp.Salary <> de.Salary\r\n",
					") s\r\n",
					"ON t.Employee = s.MergeKey\r\n",
					"WHEN MATCHED AND t.CurrentRecord = 1 AND t.Salary <> s.Salary THEN\r\n",
					"  UPDATE SET t.CurrentRecord = 0, t.EndDate = (CURRENT_DATE)\r\n",
					"WHEN NOT MATCHED THEN\r\n",
					"  INSERT (Employee, Salary, BeginDate, EndDate, CurrentRecord) VALUES (s.Employee, s.Salary, CURRENT_DATE, '2999-12-31',1)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT *\r\n",
					"FROM DELTA_Employees\r\n",
					"ORDER BY Employee"
				],
				"execution_count": 6
			}
		]
	}
}